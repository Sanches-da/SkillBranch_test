package com.skill_branch.test.data.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHARACTERS".
*/
public class CharacterModelDao extends AbstractDao<CharacterModel, Long> {

    public static final String TABLENAME = "CHARACTERS";

    /**
     * Properties of entity CharacterModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Remote_id = new Property(1, long.class, "remote_id", false, "REMOTE_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Born = new Property(3, String.class, "born", false, "BORN");
        public final static Property Died = new Property(4, String.class, "died", false, "DIED");
        public final static Property Titles = new Property(5, String.class, "titles", false, "TITLES");
        public final static Property Aliases = new Property(6, String.class, "aliases", false, "ALIASES");
        public final static Property LastSeason = new Property(7, String.class, "lastSeason", false, "LAST_SEASON");
        public final static Property Father = new Property(8, long.class, "father", false, "FATHER");
        public final static Property Mother = new Property(9, long.class, "mother", false, "MOTHER");
        public final static Property House = new Property(10, long.class, "house", false, "HOUSE");
    };

    private DaoSession daoSession;

    private Query<CharacterModel> houseModel_CharactersQuery;

    public CharacterModelDao(DaoConfig config) {
        super(config);
    }
    
    public CharacterModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHARACTERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REMOTE_ID\" INTEGER NOT NULL UNIQUE ," + // 1: remote_id
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"BORN\" TEXT," + // 3: born
                "\"DIED\" TEXT," + // 4: died
                "\"TITLES\" TEXT," + // 5: titles
                "\"ALIASES\" TEXT," + // 6: aliases
                "\"LAST_SEASON\" TEXT," + // 7: lastSeason
                "\"FATHER\" INTEGER NOT NULL ," + // 8: father
                "\"MOTHER\" INTEGER NOT NULL ," + // 9: mother
                "\"HOUSE\" INTEGER NOT NULL );"); // 10: house
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHARACTERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CharacterModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
        stmt.bindString(3, entity.getName());
 
        String born = entity.getBorn();
        if (born != null) {
            stmt.bindString(4, born);
        }
 
        String died = entity.getDied();
        if (died != null) {
            stmt.bindString(5, died);
        }
 
        String titles = entity.getTitles();
        if (titles != null) {
            stmt.bindString(6, titles);
        }
 
        String aliases = entity.getAliases();
        if (aliases != null) {
            stmt.bindString(7, aliases);
        }
 
        String lastSeason = entity.getLastSeason();
        if (lastSeason != null) {
            stmt.bindString(8, lastSeason);
        }
        stmt.bindLong(9, entity.getFather());
        stmt.bindLong(10, entity.getMother());
        stmt.bindLong(11, entity.getHouse());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CharacterModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRemote_id());
        stmt.bindString(3, entity.getName());
 
        String born = entity.getBorn();
        if (born != null) {
            stmt.bindString(4, born);
        }
 
        String died = entity.getDied();
        if (died != null) {
            stmt.bindString(5, died);
        }
 
        String titles = entity.getTitles();
        if (titles != null) {
            stmt.bindString(6, titles);
        }
 
        String aliases = entity.getAliases();
        if (aliases != null) {
            stmt.bindString(7, aliases);
        }
 
        String lastSeason = entity.getLastSeason();
        if (lastSeason != null) {
            stmt.bindString(8, lastSeason);
        }
        stmt.bindLong(9, entity.getFather());
        stmt.bindLong(10, entity.getMother());
        stmt.bindLong(11, entity.getHouse());
    }

    @Override
    protected final void attachEntity(CharacterModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CharacterModel readEntity(Cursor cursor, int offset) {
        CharacterModel entity = new CharacterModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // remote_id
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // born
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // died
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // titles
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // aliases
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastSeason
            cursor.getLong(offset + 8), // father
            cursor.getLong(offset + 9), // mother
            cursor.getLong(offset + 10) // house
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CharacterModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemote_id(cursor.getLong(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setBorn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDied(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitles(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAliases(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLastSeason(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFather(cursor.getLong(offset + 8));
        entity.setMother(cursor.getLong(offset + 9));
        entity.setHouse(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CharacterModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CharacterModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "characters" to-many relationship of HouseModel. */
    public List<CharacterModel> _queryHouseModel_Characters(long house) {
        synchronized (this) {
            if (houseModel_CharactersQuery == null) {
                QueryBuilder<CharacterModel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.House.eq(null));
                houseModel_CharactersQuery = queryBuilder.build();
            }
        }
        Query<CharacterModel> query = houseModel_CharactersQuery.forCurrentThread();
        query.setParameter(0, house);
        return query.list();
    }

}
